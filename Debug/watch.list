
watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000274c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002884  08002884  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002884  08002884  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002884  08002884  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002884  08002884  00012884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002888  08002888  00012888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800288c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000020  080028ac  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080028ac  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb92  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018d7  00000000  00000000  0002bbdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  0002d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  0002e290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000139de  00000000  00000000  0002efc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b3a  00000000  00000000  0004299e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070078  00000000  00000000  0004b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb550  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b0c  00000000  00000000  000bb5cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08002840 	.word	0x08002840

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08002840 	.word	0x08002840

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f945 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f99e 	bl	80024a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95d 	bl	8000456 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f925 	bl	8000402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000070 	.word	0x20000070

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000070 	.word	0x20000070

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0112      	lsls	r2, r2, #4
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000344:	b480      	push	{r7}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f003 0307 	and.w	r3, r3, #7
 8000356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f1c3 0307 	rsb	r3, r3, #7
 800035e:	2b04      	cmp	r3, #4
 8000360:	bf28      	it	cs
 8000362:	2304      	movcs	r3, #4
 8000364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3304      	adds	r3, #4
 800036a:	2b06      	cmp	r3, #6
 800036c:	d902      	bls.n	8000374 <NVIC_EncodePriority+0x30>
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3b03      	subs	r3, #3
 8000372:	e000      	b.n	8000376 <NVIC_EncodePriority+0x32>
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43da      	mvns	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	401a      	ands	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43d9      	mvns	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	4313      	orrs	r3, r2
         );
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3724      	adds	r7, #36	; 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b8:	d301      	bcc.n	80003be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SysTick_Config+0x40>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c6:	210f      	movs	r1, #15
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SysTick_Config+0x40>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Config+0x40>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff2d 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000414:	f7ff ff42 	bl	800029c <__NVIC_GetPriorityGrouping>
 8000418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff ff90 	bl	8000344 <NVIC_EncodePriority>
 8000424:	4602      	mov	r2, r0
 8000426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <__NVIC_SetPriority>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff35 	bl	80002b8 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000470:	b480      	push	{r7}
 8000472:	b08b      	sub	sp, #44	; 0x2c
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000482:	e127      	b.n	80006d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000484:	2201      	movs	r2, #1
 8000486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	69fa      	ldr	r2, [r7, #28]
 8000494:	4013      	ands	r3, r2
 8000496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	429a      	cmp	r2, r3
 800049e:	f040 8116 	bne.w	80006ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b12      	cmp	r3, #18
 80004a8:	d034      	beq.n	8000514 <HAL_GPIO_Init+0xa4>
 80004aa:	2b12      	cmp	r3, #18
 80004ac:	d80d      	bhi.n	80004ca <HAL_GPIO_Init+0x5a>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d02b      	beq.n	800050a <HAL_GPIO_Init+0x9a>
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d804      	bhi.n	80004c0 <HAL_GPIO_Init+0x50>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d031      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d01c      	beq.n	80004f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004be:	e048      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d043      	beq.n	800054c <HAL_GPIO_Init+0xdc>
 80004c4:	2b11      	cmp	r3, #17
 80004c6:	d01b      	beq.n	8000500 <HAL_GPIO_Init+0x90>
          break;
 80004c8:	e043      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004ca:	4a89      	ldr	r2, [pc, #548]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d026      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004d0:	4a87      	ldr	r2, [pc, #540]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d806      	bhi.n	80004e4 <HAL_GPIO_Init+0x74>
 80004d6:	4a87      	ldr	r2, [pc, #540]	; (80006f4 <HAL_GPIO_Init+0x284>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d020      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004dc:	4a86      	ldr	r2, [pc, #536]	; (80006f8 <HAL_GPIO_Init+0x288>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d01d      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004e2:	e036      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004e4:	4a85      	ldr	r2, [pc, #532]	; (80006fc <HAL_GPIO_Init+0x28c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d019      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ea:	4a85      	ldr	r2, [pc, #532]	; (8000700 <HAL_GPIO_Init+0x290>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d016      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004f0:	4a84      	ldr	r2, [pc, #528]	; (8000704 <HAL_GPIO_Init+0x294>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d013      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004f6:	e02c      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	623b      	str	r3, [r7, #32]
          break;
 80004fe:	e028      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	3304      	adds	r3, #4
 8000506:	623b      	str	r3, [r7, #32]
          break;
 8000508:	e023      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	3308      	adds	r3, #8
 8000510:	623b      	str	r3, [r7, #32]
          break;
 8000512:	e01e      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	330c      	adds	r3, #12
 800051a:	623b      	str	r3, [r7, #32]
          break;
 800051c:	e019      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d102      	bne.n	800052c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000526:	2304      	movs	r3, #4
 8000528:	623b      	str	r3, [r7, #32]
          break;
 800052a:	e012      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d105      	bne.n	8000540 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000534:	2308      	movs	r3, #8
 8000536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	611a      	str	r2, [r3, #16]
          break;
 800053e:	e008      	b.n	8000552 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000540:	2308      	movs	r3, #8
 8000542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	615a      	str	r2, [r3, #20]
          break;
 800054a:	e002      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
          break;
 8000550:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	2bff      	cmp	r3, #255	; 0xff
 8000556:	d801      	bhi.n	800055c <HAL_GPIO_Init+0xec>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	e001      	b.n	8000560 <HAL_GPIO_Init+0xf0>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3304      	adds	r3, #4
 8000560:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d802      	bhi.n	800056e <HAL_GPIO_Init+0xfe>
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	e002      	b.n	8000574 <HAL_GPIO_Init+0x104>
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	3b08      	subs	r3, #8
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	210f      	movs	r1, #15
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	6a39      	ldr	r1, [r7, #32]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	2b00      	cmp	r3, #0
 800059e:	f000 8096 	beq.w	80006ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	4b59      	ldr	r3, [pc, #356]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a58      	ldr	r2, [pc, #352]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b56      	ldr	r3, [pc, #344]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ba:	4a54      	ldr	r2, [pc, #336]	; (800070c <HAL_GPIO_Init+0x29c>)
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	3302      	adds	r3, #2
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a4b      	ldr	r2, [pc, #300]	; (8000710 <HAL_GPIO_Init+0x2a0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d013      	beq.n	800060e <HAL_GPIO_Init+0x19e>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a4a      	ldr	r2, [pc, #296]	; (8000714 <HAL_GPIO_Init+0x2a4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d00d      	beq.n	800060a <HAL_GPIO_Init+0x19a>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a49      	ldr	r2, [pc, #292]	; (8000718 <HAL_GPIO_Init+0x2a8>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d007      	beq.n	8000606 <HAL_GPIO_Init+0x196>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a48      	ldr	r2, [pc, #288]	; (800071c <HAL_GPIO_Init+0x2ac>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_GPIO_Init+0x192>
 80005fe:	2303      	movs	r3, #3
 8000600:	e006      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000602:	2304      	movs	r3, #4
 8000604:	e004      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000606:	2302      	movs	r3, #2
 8000608:	e002      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060a:	2301      	movs	r3, #1
 800060c:	e000      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060e:	2300      	movs	r3, #0
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	f002 0203 	and.w	r2, r2, #3
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	4093      	lsls	r3, r2
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	4313      	orrs	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000620:	493a      	ldr	r1, [pc, #232]	; (800070c <HAL_GPIO_Init+0x29c>)
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	3302      	adds	r3, #2
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4938      	ldr	r1, [pc, #224]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
 8000646:	e006      	b.n	8000656 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	43db      	mvns	r3, r3
 8000650:	4933      	ldr	r1, [pc, #204]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000652:	4013      	ands	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	492e      	ldr	r1, [pc, #184]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4313      	orrs	r3, r2
 800066c:	604b      	str	r3, [r1, #4]
 800066e:	e006      	b.n	800067e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	43db      	mvns	r3, r3
 8000678:	4929      	ldr	r1, [pc, #164]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800067a:	4013      	ands	r3, r2
 800067c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	4924      	ldr	r1, [pc, #144]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	4313      	orrs	r3, r2
 8000694:	608b      	str	r3, [r1, #8]
 8000696:	e006      	b.n	80006a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	43db      	mvns	r3, r3
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006a2:	4013      	ands	r3, r2
 80006a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	491a      	ldr	r1, [pc, #104]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60cb      	str	r3, [r1, #12]
 80006be:	e006      	b.n	80006ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	3301      	adds	r3, #1
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	fa22 f303 	lsr.w	r3, r2, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f47f aed0 	bne.w	8000484 <HAL_GPIO_Init+0x14>
  }
}
 80006e4:	bf00      	nop
 80006e6:	372c      	adds	r7, #44	; 0x2c
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	10210000 	.word	0x10210000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	10120000 	.word	0x10120000
 80006fc:	10310000 	.word	0x10310000
 8000700:	10320000 	.word	0x10320000
 8000704:	10220000 	.word	0x10220000
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000
 800071c:	40011400 	.word	0x40011400
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	4013      	ands	r3, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	d002      	beq.n	8000742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800073c:	2301      	movs	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	e001      	b.n	8000746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	460b      	mov	r3, r1
 800075c:	807b      	strh	r3, [r7, #2]
 800075e:	4613      	mov	r3, r2
 8000760:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000762:	787b      	ldrb	r3, [r7, #1]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d003      	beq.n	8000770 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000768:	887a      	ldrh	r2, [r7, #2]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800076e:	e003      	b.n	8000778 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000770:	887b      	ldrh	r3, [r7, #2]
 8000772:	041a      	lsls	r2, r3, #16
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	611a      	str	r2, [r3, #16]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
	...

08000784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000790:	695a      	ldr	r2, [r3, #20]
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	4013      	ands	r3, r2
 8000796:	2b00      	cmp	r3, #0
 8000798:	d006      	beq.n	80007a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fac0 	bl	8001d28 <HAL_GPIO_EXTI_Callback>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40010400 	.word	0x40010400

080007b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e10f      	b.n	80009e6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d106      	bne.n	80007e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f001 fe96 	bl	800250c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2224      	movs	r2, #36	; 0x24
 80007e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f022 0201 	bic.w	r2, r2, #1
 80007f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80007f8:	f000 fcda 	bl	80011b0 <HAL_RCC_GetPCLK1Freq>
 80007fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	4a7b      	ldr	r2, [pc, #492]	; (80009f0 <HAL_I2C_Init+0x23c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d807      	bhi.n	8000818 <HAL_I2C_Init+0x64>
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4a7a      	ldr	r2, [pc, #488]	; (80009f4 <HAL_I2C_Init+0x240>)
 800080c:	4293      	cmp	r3, r2
 800080e:	bf94      	ite	ls
 8000810:	2301      	movls	r3, #1
 8000812:	2300      	movhi	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	e006      	b.n	8000826 <HAL_I2C_Init+0x72>
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4a77      	ldr	r2, [pc, #476]	; (80009f8 <HAL_I2C_Init+0x244>)
 800081c:	4293      	cmp	r3, r2
 800081e:	bf94      	ite	ls
 8000820:	2301      	movls	r3, #1
 8000822:	2300      	movhi	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e0db      	b.n	80009e6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	4a72      	ldr	r2, [pc, #456]	; (80009fc <HAL_I2C_Init+0x248>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	0c9b      	lsrs	r3, r3, #18
 8000838:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	430a      	orrs	r2, r1
 800084c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	6a1b      	ldr	r3, [r3, #32]
 8000854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4a64      	ldr	r2, [pc, #400]	; (80009f0 <HAL_I2C_Init+0x23c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d802      	bhi.n	8000868 <HAL_I2C_Init+0xb4>
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	3301      	adds	r3, #1
 8000866:	e009      	b.n	800087c <HAL_I2C_Init+0xc8>
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800086e:	fb02 f303 	mul.w	r3, r2, r3
 8000872:	4a63      	ldr	r2, [pc, #396]	; (8000a00 <HAL_I2C_Init+0x24c>)
 8000874:	fba2 2303 	umull	r2, r3, r2, r3
 8000878:	099b      	lsrs	r3, r3, #6
 800087a:	3301      	adds	r3, #1
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	430b      	orrs	r3, r1
 8000882:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800088e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	4956      	ldr	r1, [pc, #344]	; (80009f0 <HAL_I2C_Init+0x23c>)
 8000898:	428b      	cmp	r3, r1
 800089a:	d80d      	bhi.n	80008b8 <HAL_I2C_Init+0x104>
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	1e59      	subs	r1, r3, #1
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80008aa:	3301      	adds	r3, #1
 80008ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	bf38      	it	cc
 80008b4:	2304      	movcc	r3, #4
 80008b6:	e04f      	b.n	8000958 <HAL_I2C_Init+0x1a4>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d111      	bne.n	80008e4 <HAL_I2C_Init+0x130>
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	1e58      	subs	r0, r3, #1
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6859      	ldr	r1, [r3, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	440b      	add	r3, r1
 80008ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80008d2:	3301      	adds	r3, #1
 80008d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008d8:	2b00      	cmp	r3, #0
 80008da:	bf0c      	ite	eq
 80008dc:	2301      	moveq	r3, #1
 80008de:	2300      	movne	r3, #0
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	e012      	b.n	800090a <HAL_I2C_Init+0x156>
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	1e58      	subs	r0, r3, #1
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6859      	ldr	r1, [r3, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	440b      	add	r3, r1
 80008f2:	0099      	lsls	r1, r3, #2
 80008f4:	440b      	add	r3, r1
 80008f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80008fa:	3301      	adds	r3, #1
 80008fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000900:	2b00      	cmp	r3, #0
 8000902:	bf0c      	ite	eq
 8000904:	2301      	moveq	r3, #1
 8000906:	2300      	movne	r3, #0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_I2C_Init+0x15e>
 800090e:	2301      	movs	r3, #1
 8000910:	e022      	b.n	8000958 <HAL_I2C_Init+0x1a4>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10e      	bne.n	8000938 <HAL_I2C_Init+0x184>
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	1e58      	subs	r0, r3, #1
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6859      	ldr	r1, [r3, #4]
 8000922:	460b      	mov	r3, r1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	440b      	add	r3, r1
 8000928:	fbb0 f3f3 	udiv	r3, r0, r3
 800092c:	3301      	adds	r3, #1
 800092e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000936:	e00f      	b.n	8000958 <HAL_I2C_Init+0x1a4>
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	1e58      	subs	r0, r3, #1
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6859      	ldr	r1, [r3, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	440b      	add	r3, r1
 8000946:	0099      	lsls	r1, r3, #2
 8000948:	440b      	add	r3, r1
 800094a:	fbb0 f3f3 	udiv	r3, r0, r3
 800094e:	3301      	adds	r3, #1
 8000950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000958:	6879      	ldr	r1, [r7, #4]
 800095a:	6809      	ldr	r1, [r1, #0]
 800095c:	4313      	orrs	r3, r2
 800095e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	69da      	ldr	r2, [r3, #28]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	431a      	orrs	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	430a      	orrs	r2, r1
 800097a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000986:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	6911      	ldr	r1, [r2, #16]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	68d2      	ldr	r2, [r2, #12]
 8000992:	4311      	orrs	r1, r2
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	6812      	ldr	r2, [r2, #0]
 8000998:	430b      	orrs	r3, r1
 800099a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	695a      	ldr	r2, [r3, #20]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	431a      	orrs	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	430a      	orrs	r2, r1
 80009b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f042 0201 	orr.w	r2, r2, #1
 80009c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2220      	movs	r2, #32
 80009d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	000186a0 	.word	0x000186a0
 80009f4:	001e847f 	.word	0x001e847f
 80009f8:	003d08ff 	.word	0x003d08ff
 80009fc:	431bde83 	.word	0x431bde83
 8000a00:	10624dd3 	.word	0x10624dd3

08000a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d101      	bne.n	8000a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e26c      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 8087 	beq.w	8000b32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a24:	4b92      	ldr	r3, [pc, #584]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 030c 	and.w	r3, r3, #12
 8000a2c:	2b04      	cmp	r3, #4
 8000a2e:	d00c      	beq.n	8000a4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a30:	4b8f      	ldr	r3, [pc, #572]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 030c 	and.w	r3, r3, #12
 8000a38:	2b08      	cmp	r3, #8
 8000a3a:	d112      	bne.n	8000a62 <HAL_RCC_OscConfig+0x5e>
 8000a3c:	4b8c      	ldr	r3, [pc, #560]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a48:	d10b      	bne.n	8000a62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a4a:	4b89      	ldr	r3, [pc, #548]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d06c      	beq.n	8000b30 <HAL_RCC_OscConfig+0x12c>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d168      	bne.n	8000b30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e246      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a6a:	d106      	bne.n	8000a7a <HAL_RCC_OscConfig+0x76>
 8000a6c:	4b80      	ldr	r3, [pc, #512]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a7f      	ldr	r2, [pc, #508]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	e02e      	b.n	8000ad8 <HAL_RCC_OscConfig+0xd4>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d10c      	bne.n	8000a9c <HAL_RCC_OscConfig+0x98>
 8000a82:	4b7b      	ldr	r3, [pc, #492]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a7a      	ldr	r2, [pc, #488]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	4b78      	ldr	r3, [pc, #480]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a77      	ldr	r2, [pc, #476]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	e01d      	b.n	8000ad8 <HAL_RCC_OscConfig+0xd4>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000aa4:	d10c      	bne.n	8000ac0 <HAL_RCC_OscConfig+0xbc>
 8000aa6:	4b72      	ldr	r3, [pc, #456]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a71      	ldr	r2, [pc, #452]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	4b6f      	ldr	r3, [pc, #444]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a6e      	ldr	r2, [pc, #440]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	e00b      	b.n	8000ad8 <HAL_RCC_OscConfig+0xd4>
 8000ac0:	4b6b      	ldr	r3, [pc, #428]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a6a      	ldr	r2, [pc, #424]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	4b68      	ldr	r3, [pc, #416]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a67      	ldr	r2, [pc, #412]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ad6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d013      	beq.n	8000b08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ae0:	f7ff fb8c 	bl	80001fc <HAL_GetTick>
 8000ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae6:	e008      	b.n	8000afa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ae8:	f7ff fb88 	bl	80001fc <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	2b64      	cmp	r3, #100	; 0x64
 8000af4:	d901      	bls.n	8000afa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000af6:	2303      	movs	r3, #3
 8000af8:	e1fa      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000afa:	4b5d      	ldr	r3, [pc, #372]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d0f0      	beq.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
 8000b06:	e014      	b.n	8000b32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b08:	f7ff fb78 	bl	80001fc <HAL_GetTick>
 8000b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b0e:	e008      	b.n	8000b22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b10:	f7ff fb74 	bl	80001fc <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	2b64      	cmp	r3, #100	; 0x64
 8000b1c:	d901      	bls.n	8000b22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	e1e6      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b22:	4b53      	ldr	r3, [pc, #332]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f0      	bne.n	8000b10 <HAL_RCC_OscConfig+0x10c>
 8000b2e:	e000      	b.n	8000b32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d063      	beq.n	8000c06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b3e:	4b4c      	ldr	r3, [pc, #304]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 030c 	and.w	r3, r3, #12
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00b      	beq.n	8000b62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b4a:	4b49      	ldr	r3, [pc, #292]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 030c 	and.w	r3, r3, #12
 8000b52:	2b08      	cmp	r3, #8
 8000b54:	d11c      	bne.n	8000b90 <HAL_RCC_OscConfig+0x18c>
 8000b56:	4b46      	ldr	r3, [pc, #280]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d116      	bne.n	8000b90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b62:	4b43      	ldr	r3, [pc, #268]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d005      	beq.n	8000b7a <HAL_RCC_OscConfig+0x176>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d001      	beq.n	8000b7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e1ba      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b7a:	4b3d      	ldr	r3, [pc, #244]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	4939      	ldr	r1, [pc, #228]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b8e:	e03a      	b.n	8000c06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d020      	beq.n	8000bda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b98:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b9e:	f7ff fb2d 	bl	80001fc <HAL_GetTick>
 8000ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba4:	e008      	b.n	8000bb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ba6:	f7ff fb29 	bl	80001fc <HAL_GetTick>
 8000baa:	4602      	mov	r2, r0
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d901      	bls.n	8000bb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	e19b      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d0f0      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	4927      	ldr	r1, [pc, #156]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	600b      	str	r3, [r1, #0]
 8000bd8:	e015      	b.n	8000c06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be0:	f7ff fb0c 	bl	80001fc <HAL_GetTick>
 8000be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000be6:	e008      	b.n	8000bfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000be8:	f7ff fb08 	bl	80001fc <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d901      	bls.n	8000bfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e17a      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1f0      	bne.n	8000be8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d03a      	beq.n	8000c88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d019      	beq.n	8000c4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_RCC_OscConfig+0x274>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c20:	f7ff faec 	bl	80001fc <HAL_GetTick>
 8000c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c26:	e008      	b.n	8000c3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c28:	f7ff fae8 	bl	80001fc <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d901      	bls.n	8000c3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c36:	2303      	movs	r3, #3
 8000c38:	e15a      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d0f0      	beq.n	8000c28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c46:	2001      	movs	r0, #1
 8000c48:	f000 fada 	bl	8001200 <RCC_Delay>
 8000c4c:	e01c      	b.n	8000c88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_RCC_OscConfig+0x274>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c54:	f7ff fad2 	bl	80001fc <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c5a:	e00f      	b.n	8000c7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c5c:	f7ff face 	bl	80001fc <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d908      	bls.n	8000c7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e140      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000
 8000c74:	42420000 	.word	0x42420000
 8000c78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c7c:	4b9e      	ldr	r3, [pc, #632]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1e9      	bne.n	8000c5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 80a6 	beq.w	8000de2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c9a:	4b97      	ldr	r3, [pc, #604]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10d      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	4b94      	ldr	r3, [pc, #592]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	4a93      	ldr	r2, [pc, #588]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	61d3      	str	r3, [r2, #28]
 8000cb2:	4b91      	ldr	r3, [pc, #580]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc2:	4b8e      	ldr	r3, [pc, #568]	; (8000efc <HAL_RCC_OscConfig+0x4f8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d118      	bne.n	8000d00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cce:	4b8b      	ldr	r3, [pc, #556]	; (8000efc <HAL_RCC_OscConfig+0x4f8>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a8a      	ldr	r2, [pc, #552]	; (8000efc <HAL_RCC_OscConfig+0x4f8>)
 8000cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cda:	f7ff fa8f 	bl	80001fc <HAL_GetTick>
 8000cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce0:	e008      	b.n	8000cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ce2:	f7ff fa8b 	bl	80001fc <HAL_GetTick>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	2b64      	cmp	r3, #100	; 0x64
 8000cee:	d901      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e0fd      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf4:	4b81      	ldr	r3, [pc, #516]	; (8000efc <HAL_RCC_OscConfig+0x4f8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d0f0      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d106      	bne.n	8000d16 <HAL_RCC_OscConfig+0x312>
 8000d08:	4b7b      	ldr	r3, [pc, #492]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d0a:	6a1b      	ldr	r3, [r3, #32]
 8000d0c:	4a7a      	ldr	r2, [pc, #488]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6213      	str	r3, [r2, #32]
 8000d14:	e02d      	b.n	8000d72 <HAL_RCC_OscConfig+0x36e>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10c      	bne.n	8000d38 <HAL_RCC_OscConfig+0x334>
 8000d1e:	4b76      	ldr	r3, [pc, #472]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	4a75      	ldr	r2, [pc, #468]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d24:	f023 0301 	bic.w	r3, r3, #1
 8000d28:	6213      	str	r3, [r2, #32]
 8000d2a:	4b73      	ldr	r3, [pc, #460]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d2c:	6a1b      	ldr	r3, [r3, #32]
 8000d2e:	4a72      	ldr	r2, [pc, #456]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d30:	f023 0304 	bic.w	r3, r3, #4
 8000d34:	6213      	str	r3, [r2, #32]
 8000d36:	e01c      	b.n	8000d72 <HAL_RCC_OscConfig+0x36e>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	2b05      	cmp	r3, #5
 8000d3e:	d10c      	bne.n	8000d5a <HAL_RCC_OscConfig+0x356>
 8000d40:	4b6d      	ldr	r3, [pc, #436]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	4a6c      	ldr	r2, [pc, #432]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6213      	str	r3, [r2, #32]
 8000d4c:	4b6a      	ldr	r3, [pc, #424]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	4a69      	ldr	r2, [pc, #420]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6213      	str	r3, [r2, #32]
 8000d58:	e00b      	b.n	8000d72 <HAL_RCC_OscConfig+0x36e>
 8000d5a:	4b67      	ldr	r3, [pc, #412]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d5c:	6a1b      	ldr	r3, [r3, #32]
 8000d5e:	4a66      	ldr	r2, [pc, #408]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d60:	f023 0301 	bic.w	r3, r3, #1
 8000d64:	6213      	str	r3, [r2, #32]
 8000d66:	4b64      	ldr	r3, [pc, #400]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d68:	6a1b      	ldr	r3, [r3, #32]
 8000d6a:	4a63      	ldr	r2, [pc, #396]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d6c:	f023 0304 	bic.w	r3, r3, #4
 8000d70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d015      	beq.n	8000da6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7a:	f7ff fa3f 	bl	80001fc <HAL_GetTick>
 8000d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d80:	e00a      	b.n	8000d98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d82:	f7ff fa3b 	bl	80001fc <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d901      	bls.n	8000d98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e0ab      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d98:	4b57      	ldr	r3, [pc, #348]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0ee      	beq.n	8000d82 <HAL_RCC_OscConfig+0x37e>
 8000da4:	e014      	b.n	8000dd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da6:	f7ff fa29 	bl	80001fc <HAL_GetTick>
 8000daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dac:	e00a      	b.n	8000dc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dae:	f7ff fa25 	bl	80001fc <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d901      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e095      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dc4:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1ee      	bne.n	8000dae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000dd0:	7dfb      	ldrb	r3, [r7, #23]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d105      	bne.n	8000de2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dd6:	4b48      	ldr	r3, [pc, #288]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4a47      	ldr	r2, [pc, #284]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000de0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 8081 	beq.w	8000eee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dec:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 030c 	and.w	r3, r3, #12
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	d061      	beq.n	8000ebc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69db      	ldr	r3, [r3, #28]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d146      	bne.n	8000e8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e00:	4b3f      	ldr	r3, [pc, #252]	; (8000f00 <HAL_RCC_OscConfig+0x4fc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e06:	f7ff f9f9 	bl	80001fc <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e0e:	f7ff f9f5 	bl	80001fc <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e067      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e20:	4b35      	ldr	r3, [pc, #212]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1f0      	bne.n	8000e0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a1b      	ldr	r3, [r3, #32]
 8000e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e34:	d108      	bne.n	8000e48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e36:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	492d      	ldr	r1, [pc, #180]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e48:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a19      	ldr	r1, [r3, #32]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	4927      	ldr	r1, [pc, #156]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <HAL_RCC_OscConfig+0x4fc>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e66:	f7ff f9c9 	bl	80001fc <HAL_GetTick>
 8000e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e6c:	e008      	b.n	8000e80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e6e:	f7ff f9c5 	bl	80001fc <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e037      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e80:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f0      	beq.n	8000e6e <HAL_RCC_OscConfig+0x46a>
 8000e8c:	e02f      	b.n	8000eee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_RCC_OscConfig+0x4fc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff f9b2 	bl	80001fc <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e9c:	f7ff f9ae 	bl	80001fc <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e020      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_OscConfig+0x498>
 8000eba:	e018      	b.n	8000eee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d101      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e013      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_RCC_OscConfig+0x4f4>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d106      	bne.n	8000eea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d001      	beq.n	8000eee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40007000 	.word	0x40007000
 8000f00:	42420060 	.word	0x42420060

08000f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e0d0      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f18:	4b6a      	ldr	r3, [pc, #424]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d910      	bls.n	8000f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f26:	4b67      	ldr	r3, [pc, #412]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f023 0207 	bic.w	r2, r3, #7
 8000f2e:	4965      	ldr	r1, [pc, #404]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f36:	4b63      	ldr	r3, [pc, #396]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d001      	beq.n	8000f48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e0b8      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d020      	beq.n	8000f96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f60:	4b59      	ldr	r3, [pc, #356]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	4a58      	ldr	r2, [pc, #352]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f78:	4b53      	ldr	r3, [pc, #332]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	4a52      	ldr	r2, [pc, #328]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f84:	4b50      	ldr	r3, [pc, #320]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	494d      	ldr	r1, [pc, #308]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d040      	beq.n	8001024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d107      	bne.n	8000fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	4b47      	ldr	r3, [pc, #284]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d115      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e07f      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d107      	bne.n	8000fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc2:	4b41      	ldr	r3, [pc, #260]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d109      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e073      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd2:	4b3d      	ldr	r3, [pc, #244]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e06b      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe2:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f023 0203 	bic.w	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	4936      	ldr	r1, [pc, #216]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ff4:	f7ff f902 	bl	80001fc <HAL_GetTick>
 8000ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffa:	e00a      	b.n	8001012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ffc:	f7ff f8fe 	bl	80001fc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	f241 3288 	movw	r2, #5000	; 0x1388
 800100a:	4293      	cmp	r3, r2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e053      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 020c 	and.w	r2, r3, #12
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	429a      	cmp	r2, r3
 8001022:	d1eb      	bne.n	8000ffc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d210      	bcs.n	8001054 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 0207 	bic.w	r2, r3, #7
 800103a:	4922      	ldr	r1, [pc, #136]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	4313      	orrs	r3, r2
 8001040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d001      	beq.n	8001054 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e032      	b.n	80010ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b00      	cmp	r3, #0
 800105e:	d008      	beq.n	8001072 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	4916      	ldr	r1, [pc, #88]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 800106e:	4313      	orrs	r3, r2
 8001070:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d009      	beq.n	8001092 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	490e      	ldr	r1, [pc, #56]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 800108e:	4313      	orrs	r3, r2
 8001090:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001092:	f000 f821 	bl	80010d8 <HAL_RCC_GetSysClockFreq>
 8001096:	4601      	mov	r1, r0
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_RCC_ClockConfig+0x1c4>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	091b      	lsrs	r3, r3, #4
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_RCC_ClockConfig+0x1c8>)
 80010a4:	5cd3      	ldrb	r3, [r2, r3]
 80010a6:	fa21 f303 	lsr.w	r3, r1, r3
 80010aa:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <HAL_RCC_ClockConfig+0x1cc>)
 80010ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_RCC_ClockConfig+0x1d0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f860 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40022000 	.word	0x40022000
 80010c8:	40021000 	.word	0x40021000
 80010cc:	0800286c 	.word	0x0800286c
 80010d0:	2000001c 	.word	0x2000001c
 80010d4:	20000000 	.word	0x20000000

080010d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010d8:	b490      	push	{r4, r7}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010de:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <HAL_RCC_GetSysClockFreq+0xb0>)
 80010e0:	1d3c      	adds	r4, r7, #4
 80010e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010e8:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_RCC_GetSysClockFreq+0xb4>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001102:	4b23      	ldr	r3, [pc, #140]	; (8001190 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b04      	cmp	r3, #4
 8001110:	d002      	beq.n	8001118 <HAL_RCC_GetSysClockFreq+0x40>
 8001112:	2b08      	cmp	r3, #8
 8001114:	d003      	beq.n	800111e <HAL_RCC_GetSysClockFreq+0x46>
 8001116:	e02d      	b.n	8001174 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <HAL_RCC_GetSysClockFreq+0xbc>)
 800111a:	623b      	str	r3, [r7, #32]
      break;
 800111c:	e02d      	b.n	800117a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	0c9b      	lsrs	r3, r3, #18
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800112a:	4413      	add	r3, r2
 800112c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001130:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d013      	beq.n	8001164 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <HAL_RCC_GetSysClockFreq+0xb8>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	0c5b      	lsrs	r3, r3, #17
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800114a:	4413      	add	r3, r2
 800114c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001150:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001156:	fb02 f203 	mul.w	r2, r2, r3
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
 8001162:	e004      	b.n	800116e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001168:	fb02 f303 	mul.w	r3, r2, r3
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	623b      	str	r3, [r7, #32]
      break;
 8001172:	e002      	b.n	800117a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001176:	623b      	str	r3, [r7, #32]
      break;
 8001178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800117a:	6a3b      	ldr	r3, [r7, #32]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bc90      	pop	{r4, r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	08002858 	.word	0x08002858
 800118c:	08002868 	.word	0x08002868
 8001190:	40021000 	.word	0x40021000
 8001194:	007a1200 	.word	0x007a1200
 8001198:	003d0900 	.word	0x003d0900

0800119c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <HAL_RCC_GetHCLKFreq+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	2000001c 	.word	0x2000001c

080011b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011b4:	f7ff fff2 	bl	800119c <HAL_RCC_GetHCLKFreq>
 80011b8:	4601      	mov	r1, r0
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	0a1b      	lsrs	r3, r3, #8
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40021000 	.word	0x40021000
 80011d4:	0800287c 	.word	0x0800287c

080011d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011dc:	f7ff ffde 	bl	800119c <HAL_RCC_GetHCLKFreq>
 80011e0:	4601      	mov	r1, r0
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	0adb      	lsrs	r3, r3, #11
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	4a03      	ldr	r2, [pc, #12]	; (80011fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80011ee:	5cd3      	ldrb	r3, [r2, r3]
 80011f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	0800287c 	.word	0x0800287c

08001200 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <RCC_Delay+0x34>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <RCC_Delay+0x38>)
 800120e:	fba2 2303 	umull	r2, r3, r2, r3
 8001212:	0a5b      	lsrs	r3, r3, #9
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	fb02 f303 	mul.w	r3, r2, r3
 800121a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800121c:	bf00      	nop
  }
  while (Delay --);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1e5a      	subs	r2, r3, #1
 8001222:	60fa      	str	r2, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f9      	bne.n	800121c <RCC_Delay+0x1c>
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	2000001c 	.word	0x2000001c
 8001238:	10624dd3 	.word	0x10624dd3

0800123c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e01d      	b.n	800128a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f001 f992 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2202      	movs	r2, #2
 800126c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3304      	adds	r3, #4
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f000 fa10 	bl	80016a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001292:	b480      	push	{r7}
 8001294:	b085      	sub	sp, #20
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0201 	orr.w	r2, r2, #1
 80012a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b06      	cmp	r3, #6
 80012ba:	d007      	beq.n	80012cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0201 	orr.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d122      	bne.n	8001334 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d11b      	bne.n	8001334 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f06f 0202 	mvn.w	r2, #2
 8001304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f9a4 	bl	8001668 <HAL_TIM_IC_CaptureCallback>
 8001320:	e005      	b.n	800132e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f997 	bl	8001656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f9a6 	bl	800167a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	2b04      	cmp	r3, #4
 8001340:	d122      	bne.n	8001388 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b04      	cmp	r3, #4
 800134e:	d11b      	bne.n	8001388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f06f 0204 	mvn.w	r2, #4
 8001358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2202      	movs	r2, #2
 800135e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f97a 	bl	8001668 <HAL_TIM_IC_CaptureCallback>
 8001374:	e005      	b.n	8001382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f96d 	bl	8001656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f97c 	bl	800167a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b08      	cmp	r3, #8
 8001394:	d122      	bne.n	80013dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d11b      	bne.n	80013dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f06f 0208 	mvn.w	r2, #8
 80013ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2204      	movs	r2, #4
 80013b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f950 	bl	8001668 <HAL_TIM_IC_CaptureCallback>
 80013c8:	e005      	b.n	80013d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f943 	bl	8001656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f952 	bl	800167a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	2b10      	cmp	r3, #16
 80013e8:	d122      	bne.n	8001430 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	2b10      	cmp	r3, #16
 80013f6:	d11b      	bne.n	8001430 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f06f 0210 	mvn.w	r2, #16
 8001400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2208      	movs	r2, #8
 8001406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f926 	bl	8001668 <HAL_TIM_IC_CaptureCallback>
 800141c:	e005      	b.n	800142a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f919 	bl	8001656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f928 	bl	800167a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b01      	cmp	r3, #1
 800143c:	d10e      	bne.n	800145c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d107      	bne.n	800145c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f06f 0201 	mvn.w	r2, #1
 8001454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 fc96 	bl	8001d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001466:	2b80      	cmp	r3, #128	; 0x80
 8001468:	d10e      	bne.n	8001488 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001474:	2b80      	cmp	r3, #128	; 0x80
 8001476:	d107      	bne.n	8001488 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fa51 	bl	800192a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001492:	2b40      	cmp	r3, #64	; 0x40
 8001494:	d10e      	bne.n	80014b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a0:	2b40      	cmp	r3, #64	; 0x40
 80014a2:	d107      	bne.n	80014b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80014ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f8ec 	bl	800168c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	f003 0320 	and.w	r3, r3, #32
 80014be:	2b20      	cmp	r3, #32
 80014c0:	d10e      	bne.n	80014e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	2b20      	cmp	r3, #32
 80014ce:	d107      	bne.n	80014e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f06f 0220 	mvn.w	r2, #32
 80014d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fa1c 	bl	8001918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_TIM_ConfigClockSource+0x18>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e0a6      	b.n	800164e <HAL_TIM_ConfigClockSource+0x166>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800151e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001526:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b40      	cmp	r3, #64	; 0x40
 8001536:	d067      	beq.n	8001608 <HAL_TIM_ConfigClockSource+0x120>
 8001538:	2b40      	cmp	r3, #64	; 0x40
 800153a:	d80b      	bhi.n	8001554 <HAL_TIM_ConfigClockSource+0x6c>
 800153c:	2b10      	cmp	r3, #16
 800153e:	d073      	beq.n	8001628 <HAL_TIM_ConfigClockSource+0x140>
 8001540:	2b10      	cmp	r3, #16
 8001542:	d802      	bhi.n	800154a <HAL_TIM_ConfigClockSource+0x62>
 8001544:	2b00      	cmp	r3, #0
 8001546:	d06f      	beq.n	8001628 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001548:	e078      	b.n	800163c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800154a:	2b20      	cmp	r3, #32
 800154c:	d06c      	beq.n	8001628 <HAL_TIM_ConfigClockSource+0x140>
 800154e:	2b30      	cmp	r3, #48	; 0x30
 8001550:	d06a      	beq.n	8001628 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001552:	e073      	b.n	800163c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001554:	2b70      	cmp	r3, #112	; 0x70
 8001556:	d00d      	beq.n	8001574 <HAL_TIM_ConfigClockSource+0x8c>
 8001558:	2b70      	cmp	r3, #112	; 0x70
 800155a:	d804      	bhi.n	8001566 <HAL_TIM_ConfigClockSource+0x7e>
 800155c:	2b50      	cmp	r3, #80	; 0x50
 800155e:	d033      	beq.n	80015c8 <HAL_TIM_ConfigClockSource+0xe0>
 8001560:	2b60      	cmp	r3, #96	; 0x60
 8001562:	d041      	beq.n	80015e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001564:	e06a      	b.n	800163c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800156a:	d066      	beq.n	800163a <HAL_TIM_ConfigClockSource+0x152>
 800156c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001570:	d017      	beq.n	80015a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001572:	e063      	b.n	800163c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	6899      	ldr	r1, [r3, #8]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f000 f965 	bl	8001852 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001596:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	609a      	str	r2, [r3, #8]
      break;
 80015a0:	e04c      	b.n	800163c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	6899      	ldr	r1, [r3, #8]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	f000 f94e 	bl	8001852 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015c4:	609a      	str	r2, [r3, #8]
      break;
 80015c6:	e039      	b.n	800163c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	461a      	mov	r2, r3
 80015d6:	f000 f8c5 	bl	8001764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2150      	movs	r1, #80	; 0x50
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f91c 	bl	800181e <TIM_ITRx_SetConfig>
      break;
 80015e6:	e029      	b.n	800163c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	461a      	mov	r2, r3
 80015f6:	f000 f8e3 	bl	80017c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2160      	movs	r1, #96	; 0x60
 8001600:	4618      	mov	r0, r3
 8001602:	f000 f90c 	bl	800181e <TIM_ITRx_SetConfig>
      break;
 8001606:	e019      	b.n	800163c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	6859      	ldr	r1, [r3, #4]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	461a      	mov	r2, r3
 8001616:	f000 f8a5 	bl	8001764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2140      	movs	r1, #64	; 0x40
 8001620:	4618      	mov	r0, r3
 8001622:	f000 f8fc 	bl	800181e <TIM_ITRx_SetConfig>
      break;
 8001626:	e009      	b.n	800163c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	4610      	mov	r0, r2
 8001634:	f000 f8f3 	bl	800181e <TIM_ITRx_SetConfig>
      break;
 8001638:	e000      	b.n	800163c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800163a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
	...

080016a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a29      	ldr	r2, [pc, #164]	; (8001758 <TIM_Base_SetConfig+0xb8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00b      	beq.n	80016d0 <TIM_Base_SetConfig+0x30>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016be:	d007      	beq.n	80016d0 <TIM_Base_SetConfig+0x30>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a26      	ldr	r2, [pc, #152]	; (800175c <TIM_Base_SetConfig+0xbc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d003      	beq.n	80016d0 <TIM_Base_SetConfig+0x30>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a25      	ldr	r2, [pc, #148]	; (8001760 <TIM_Base_SetConfig+0xc0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d108      	bne.n	80016e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <TIM_Base_SetConfig+0xb8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00b      	beq.n	8001702 <TIM_Base_SetConfig+0x62>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d007      	beq.n	8001702 <TIM_Base_SetConfig+0x62>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <TIM_Base_SetConfig+0xbc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d003      	beq.n	8001702 <TIM_Base_SetConfig+0x62>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a18      	ldr	r2, [pc, #96]	; (8001760 <TIM_Base_SetConfig+0xc0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d108      	bne.n	8001714 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4313      	orrs	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a07      	ldr	r2, [pc, #28]	; (8001758 <TIM_Base_SetConfig+0xb8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d103      	bne.n	8001748 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	615a      	str	r2, [r3, #20]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40012c00 	.word	0x40012c00
 800175c:	40000400 	.word	0x40000400
 8001760:	40000800 	.word	0x40000800

08001764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001764:	b480      	push	{r7}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	f023 0201 	bic.w	r2, r3, #1
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800178e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f023 030a 	bic.w	r3, r3, #10
 80017a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	621a      	str	r2, [r3, #32]
}
 80017b6:	bf00      	nop
 80017b8:	371c      	adds	r7, #28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	f023 0210 	bic.w	r2, r3, #16
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80017ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	031b      	lsls	r3, r3, #12
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80017fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	621a      	str	r2, [r3, #32]
}
 8001814:	bf00      	nop
 8001816:	371c      	adds	r7, #28
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001834:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	f043 0307 	orr.w	r3, r3, #7
 8001840:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	609a      	str	r2, [r3, #8]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001852:	b480      	push	{r7}
 8001854:	b087      	sub	sp, #28
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800186c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	021a      	lsls	r2, r3, #8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	431a      	orrs	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	4313      	orrs	r3, r2
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4313      	orrs	r3, r2
 800187e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	609a      	str	r2, [r3, #8]
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e032      	b.n	800190e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018e0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e03f      	b.n	80019ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d106      	bne.n	8001968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 fe52 	bl	800260c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2224      	movs	r2, #36	; 0x24
 800196c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800197e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f829 	bl	80019d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695a      	ldr	r2, [r3, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2220      	movs	r2, #32
 80019c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001a12:	f023 030c 	bic.w	r3, r3, #12
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	68f9      	ldr	r1, [r7, #12]
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <UART_SetConfig+0x1ac>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d14e      	bne.n	8001ade <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a40:	f7ff fbca 	bl	80011d8 <HAL_RCC_GetPCLK2Freq>
 8001a44:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009a      	lsls	r2, r3, #2
 8001a50:	441a      	add	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	4a4a      	ldr	r2, [pc, #296]	; (8001b88 <UART_SetConfig+0x1b0>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	0119      	lsls	r1, r3, #4
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009a      	lsls	r2, r3, #2
 8001a70:	441a      	add	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a7c:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <UART_SetConfig+0x1b0>)
 8001a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2064      	movs	r0, #100	; 0x64
 8001a86:	fb00 f303 	mul.w	r3, r0, r3
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	3332      	adds	r3, #50	; 0x32
 8001a90:	4a3d      	ldr	r2, [pc, #244]	; (8001b88 <UART_SetConfig+0x1b0>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a9c:	4419      	add	r1, r3
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009a      	lsls	r2, r3, #2
 8001aa8:	441a      	add	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ab4:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <UART_SetConfig+0x1b0>)
 8001ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	2064      	movs	r0, #100	; 0x64
 8001abe:	fb00 f303 	mul.w	r3, r0, r3
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	3332      	adds	r3, #50	; 0x32
 8001ac8:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <UART_SetConfig+0x1b0>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	f003 020f 	and.w	r2, r3, #15
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	440a      	add	r2, r1
 8001ada:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001adc:	e04d      	b.n	8001b7a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ade:	f7ff fb67 	bl	80011b0 <HAL_RCC_GetPCLK1Freq>
 8001ae2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	009a      	lsls	r2, r3, #2
 8001aee:	441a      	add	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <UART_SetConfig+0x1b0>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	095b      	lsrs	r3, r3, #5
 8001b02:	0119      	lsls	r1, r3, #4
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009a      	lsls	r2, r3, #2
 8001b0e:	441a      	add	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <UART_SetConfig+0x1b0>)
 8001b1c:	fba3 0302 	umull	r0, r3, r3, r2
 8001b20:	095b      	lsrs	r3, r3, #5
 8001b22:	2064      	movs	r0, #100	; 0x64
 8001b24:	fb00 f303 	mul.w	r3, r0, r3
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	3332      	adds	r3, #50	; 0x32
 8001b2e:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <UART_SetConfig+0x1b0>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	095b      	lsrs	r3, r3, #5
 8001b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3a:	4419      	add	r1, r3
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	009a      	lsls	r2, r3, #2
 8001b46:	441a      	add	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <UART_SetConfig+0x1b0>)
 8001b54:	fba3 0302 	umull	r0, r3, r3, r2
 8001b58:	095b      	lsrs	r3, r3, #5
 8001b5a:	2064      	movs	r0, #100	; 0x64
 8001b5c:	fb00 f303 	mul.w	r3, r0, r3
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	3332      	adds	r3, #50	; 0x32
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <UART_SetConfig+0x1b0>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	095b      	lsrs	r3, r3, #5
 8001b6e:	f003 020f 	and.w	r2, r3, #15
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	440a      	add	r2, r1
 8001b78:	609a      	str	r2, [r3, #8]
}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40013800 	.word	0x40013800
 8001b88:	51eb851f 	.word	0x51eb851f

08001b8c <get_Minute_led>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t get_Minute_led() {
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
	return minutes / 5;
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <get_Minute_led+0x1c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4a05      	ldr	r2, [pc, #20]	; (8001bac <get_Minute_led+0x20>)
 8001b96:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	b2db      	uxtb	r3, r3
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000016 	.word	0x20000016
 8001bac:	cccccccd 	.word	0xcccccccd

08001bb0 <get_Minute_Offset_led>:
uint8_t get_Minute_Offset_led() {
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
	return offsetLED_mapping[(minutes % 5) - 1];
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <get_Minute_Offset_led+0x28>)
 8001bb6:	781a      	ldrb	r2, [r3, #0]
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <get_Minute_Offset_led+0x2c>)
 8001bba:	fba3 1302 	umull	r1, r3, r3, r2
 8001bbe:	0899      	lsrs	r1, r3, #2
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <get_Minute_Offset_led+0x30>)
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	20000016 	.word	0x20000016
 8001bdc:	cccccccd 	.word	0xcccccccd
 8001be0:	20000018 	.word	0x20000018

08001be4 <get_Hour_led>:
uint8_t get_Hour_led() {
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
	return hours;
 8001be8:	4b02      	ldr	r3, [pc, #8]	; (8001bf4 <get_Hour_led+0x10>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	20000068 	.word	0x20000068

08001bf8 <clear_blink>:

void clear_blink() {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
	for (int i = 0; i < LED_COUNT; i++) {
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	e00c      	b.n	8001c1e <clear_blink+0x26>
		blink[i] = 0;
 8001c04:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <clear_blink+0x38>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
		blink_stat[i] = 0;
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <clear_blink+0x3c>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LED_COUNT; i++) {
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	ddef      	ble.n	8001c04 <clear_blink+0xc>
	}
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000040 	.word	0x20000040
 8001c34:	20000050 	.word	0x20000050

08001c38 <animation>:

void animation() {
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
	animation_counter++;
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <animation+0x9c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a23      	ldr	r2, [pc, #140]	; (8001cd4 <animation+0x9c>)
 8001c46:	6013      	str	r3, [r2, #0]
	if (animation_counter >= 1000) {
 8001c48:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <animation+0x9c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c50:	db02      	blt.n	8001c58 <animation+0x20>
		animation_counter = 0;
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <animation+0x9c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
	}
	//blink
	for (int i = 0; i < LED_COUNT; i++) {
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	e032      	b.n	8001cc4 <animation+0x8c>
		if (blink[i] != 0) {
 8001c5e:	4a1e      	ldr	r2, [pc, #120]	; (8001cd8 <animation+0xa0>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d029      	beq.n	8001cbe <animation+0x86>
			if (animation_counter % blink[i] == 0) {
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <animation+0x9c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	491a      	ldr	r1, [pc, #104]	; (8001cd8 <animation+0xa0>)
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	440a      	add	r2, r1
 8001c74:	7812      	ldrb	r2, [r2, #0]
 8001c76:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c7a:	fb02 f201 	mul.w	r2, r2, r1
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10e      	bne.n	8001ca2 <animation+0x6a>
				blink_stat[i] = !blink_stat[i];
 8001c84:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <animation+0xa4>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	4619      	mov	r1, r3
 8001c98:	4a10      	ldr	r2, [pc, #64]	; (8001cdc <animation+0xa4>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	460a      	mov	r2, r1
 8001ca0:	701a      	strb	r2, [r3, #0]

			}
			ptr_buffer[i] = blink_stat[i] * 5;
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <animation+0xa4>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	7819      	ldrb	r1, [r3, #0]
 8001caa:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <animation+0xa8>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	460a      	mov	r2, r1
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	0089      	lsls	r1, r1, #2
 8001cb8:	440a      	add	r2, r1
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LED_COUNT; i++) {
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	ddc9      	ble.n	8001c5e <animation+0x26>
		}
	}

}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	20000198 	.word	0x20000198
 8001cd8:	20000040 	.word	0x20000040
 8001cdc:	20000050 	.word	0x20000050
 8001ce0:	20000008 	.word	0x20000008

08001ce4 <tick>:

void tick() {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
	int ticks = HAL_GetTick();
 8001cea:	f7fe fa87 	bl	80001fc <HAL_GetTick>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	607b      	str	r3, [r7, #4]
	//Gets called by SysTick_Handler
	if (button_time != 0 && ticks - button_time >= button_time_thr) {
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <tick+0x3c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00d      	beq.n	8001d16 <tick+0x32>
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <tick+0x3c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d305      	bcc.n	8001d16 <tick+0x32>
		// Thats a long button press my friends
		button_state = 2;
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <tick+0x40>)
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	601a      	str	r2, [r3, #0]
		button_time = 0;
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <tick+0x3c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
	}

}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000064 	.word	0x20000064
 8001d24:	20000060 	.word	0x20000060

08001d28 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin)) {
 8001d32:	2102      	movs	r1, #2
 8001d34:	4811      	ldr	r0, [pc, #68]	; (8001d7c <HAL_GPIO_EXTI_Callback+0x54>)
 8001d36:	f7fe fcf5 	bl	8000724 <HAL_GPIO_ReadPin>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_GPIO_EXTI_Callback+0x2a>
		//Button pressed
		button_state = 0;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_GPIO_EXTI_Callback+0x58>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
		button_time = HAL_GetTick();
 8001d46:	f7fe fa59 	bl	80001fc <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001d4e:	601a      	str	r2, [r3, #0]
		}
		button_time = 0;

	}

}
 8001d50:	e00f      	b.n	8001d72 <HAL_GPIO_EXTI_Callback+0x4a>
		if (HAL_GetTick() - button_time < button_time_thr) {
 8001d52:	f7fe fa53 	bl	80001fc <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d202      	bcs.n	8001d6c <HAL_GPIO_EXTI_Callback+0x44>
			button_state = 1;
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_GPIO_EXTI_Callback+0x58>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
		button_time = 0;
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40010800 	.word	0x40010800
 8001d80:	20000060 	.word	0x20000060
 8001d84:	20000064 	.word	0x20000064

08001d88 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	; 0x30
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a4a      	ldr	r2, [pc, #296]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	f040 808d 	bne.w	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x12e>

		HAL_GPIO_WritePin(EN_A_GPIO_Port, EN_A_Pin, 1);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2104      	movs	r1, #4
 8001da0:	4848      	ldr	r0, [pc, #288]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001da2:	f7fe fcd6 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(K0_GPIO_Port, K0_Pin, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2140      	movs	r1, #64	; 0x40
 8001daa:	4847      	ldr	r0, [pc, #284]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001dac:	f7fe fcd1 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(K1_GPIO_Port, K1_Pin, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2120      	movs	r1, #32
 8001db4:	4844      	ldr	r0, [pc, #272]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001db6:	f7fe fccc 	bl	8000752 <HAL_GPIO_WritePin>
		//Decide which LED to illuminate
		// 00100 01010 10101 11011 11111
		int led = counter % LED_COUNT;
 8001dba:	4b44      	ldr	r3, [pc, #272]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	425a      	negs	r2, r3
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	f002 020f 	and.w	r2, r2, #15
 8001dc8:	bf58      	it	pl
 8001dca:	4253      	negpl	r3, r2
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
		int brt_step = (counter / LED_COUNT);
 8001dce:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	da00      	bge.n	8001dd8 <HAL_TIM_PeriodElapsedCallback+0x50>
 8001dd6:	330f      	adds	r3, #15
 8001dd8:	111b      	asrs	r3, r3, #4
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
		int curr_brt = ptr_draw[led];
 8001ddc:	4b3c      	ldr	r3, [pc, #240]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
		int en = (brt_values[curr_brt] >> brt_step) & 0x1;
 8001de8:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	4413      	add	r3, r2
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df4:	fa42 f303 	asr.w	r3, r2, r3
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	623b      	str	r3, [r7, #32]

		//Control matrix
		if (en) {
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d04c      	beq.n	8001e9e <HAL_TIM_PeriodElapsedCallback+0x116>

			int temp = led % 8;
 8001e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e06:	425a      	negs	r2, r3
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	f002 0207 	and.w	r2, r2, #7
 8001e10:	bf58      	it	pl
 8001e12:	4253      	negpl	r3, r2
 8001e14:	61fb      	str	r3, [r7, #28]
			int A1 = temp & 0b1;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	61bb      	str	r3, [r7, #24]
			int A2 = (temp & 0b10) >> 1;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	105b      	asrs	r3, r3, #1
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
			int A3 = (temp & 0b100) >> 2;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	109b      	asrs	r3, r3, #2
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	613b      	str	r3, [r7, #16]
			int K0 = 1 - led / 8;
 8001e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	da00      	bge.n	8001e3a <HAL_TIM_PeriodElapsedCallback+0xb2>
 8001e38:	3307      	adds	r3, #7
 8001e3a:	10db      	asrs	r3, r3, #3
 8001e3c:	425b      	negs	r3, r3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
			int K1 = led / 8;
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	da00      	bge.n	8001e4a <HAL_TIM_PeriodElapsedCallback+0xc2>
 8001e48:	3307      	adds	r3, #7
 8001e4a:	10db      	asrs	r3, r3, #3
 8001e4c:	60bb      	str	r3, [r7, #8]

			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, A1);
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	2108      	movs	r1, #8
 8001e56:	481b      	ldr	r0, [pc, #108]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001e58:	f7fe fc7b 	bl	8000752 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, A2);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	2110      	movs	r1, #16
 8001e64:	4817      	ldr	r0, [pc, #92]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001e66:	f7fe fc74 	bl	8000752 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, A3);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2120      	movs	r1, #32
 8001e72:	4814      	ldr	r0, [pc, #80]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001e74:	f7fe fc6d 	bl	8000752 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K0_GPIO_Port, K0_Pin, K0);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	2140      	movs	r1, #64	; 0x40
 8001e80:	4811      	ldr	r0, [pc, #68]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001e82:	f7fe fc66 	bl	8000752 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K1_GPIO_Port, K1_Pin, K1);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2120      	movs	r1, #32
 8001e8e:	480e      	ldr	r0, [pc, #56]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001e90:	f7fe fc5f 	bl	8000752 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_A_GPIO_Port, EN_A_Pin, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2104      	movs	r1, #4
 8001e98:	480a      	ldr	r0, [pc, #40]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001e9a:	f7fe fc5a 	bl	8000752 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(K0_GPIO_Port, K0_Pin, 0);
			 HAL_GPIO_WritePin(K1_GPIO_Port, K1_Pin, 0);*/
		}

		//counter
		counter++;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001ea6:	6013      	str	r3, [r2, #0]
		if (counter >= 16 * 6) {
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b5f      	cmp	r3, #95	; 0x5f
 8001eae:	dd02      	ble.n	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x12e>
			counter = 0;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
		}

	} else if (htim->Instance == TIM2) {
		//animation();
	}
}
 8001eb6:	bf00      	nop
 8001eb8:	3730      	adds	r7, #48	; 0x30
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	40010800 	.word	0x40010800
 8001ec8:	40010c00 	.word	0x40010c00
 8001ecc:	2000003c 	.word	0x2000003c
 8001ed0:	2000000c 	.word	0x2000000c
 8001ed4:	20000010 	.word	0x20000010

08001ed8 <flip_Framebuffer>:
static void flip_Framebuffer() {
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	//DO SOME SWAP MAGIC (TM)
	ptr_draw = (void*) ((uintptr_t) ptr_draw ^ (uintptr_t) ptr_buffer);
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <flip_Framebuffer+0x44>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <flip_Framebuffer+0x48>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4053      	eors	r3, r2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <flip_Framebuffer+0x44>)
 8001eec:	601a      	str	r2, [r3, #0]
	ptr_buffer = (void*) ((uintptr_t) ptr_draw ^ (uintptr_t) ptr_buffer);
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <flip_Framebuffer+0x44>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <flip_Framebuffer+0x48>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4053      	eors	r3, r2
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <flip_Framebuffer+0x48>)
 8001efe:	601a      	str	r2, [r3, #0]
	ptr_draw = (void*) ((uintptr_t) ptr_draw ^ (uintptr_t) ptr_buffer);
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <flip_Framebuffer+0x44>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <flip_Framebuffer+0x48>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4053      	eors	r3, r2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <flip_Framebuffer+0x44>)
 8001f10:	601a      	str	r2, [r3, #0]

}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	2000000c 	.word	0x2000000c
 8001f20:	20000008 	.word	0x20000008

08001f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f2a:	f7fe f90f 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f2e:	f000 f8ff 	bl	8002130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f32:	f000 fa2b 	bl	800238c <MX_GPIO_Init>
  MX_I2C2_Init();
 8001f36:	f000 f937 	bl	80021a8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001f3a:	f000 f9fd 	bl	8002338 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001f3e:	f000 f9af 	bl	80022a0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001f42:	f000 f95f 	bl	8002204 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8001f46:	4873      	ldr	r0, [pc, #460]	; (8002114 <main+0x1f0>)
 8001f48:	f7ff f9a3 	bl	8001292 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001f4c:	4872      	ldr	r0, [pc, #456]	; (8002118 <main+0x1f4>)
 8001f4e:	f7ff f9a0 	bl	8001292 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int cycle = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
	uint32_t starttime = HAL_GetTick();
 8001f56:	f7fe f951 	bl	80001fc <HAL_GetTick>
 8001f5a:	61f8      	str	r0, [r7, #28]
	uint32_t now;
	int programm_nr = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
	while (1) {
		switch (state) {
 8001f60:	4b6e      	ldr	r3, [pc, #440]	; (800211c <main+0x1f8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	f200 80b8 	bhi.w	80020da <main+0x1b6>
 8001f6a:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <main+0x4c>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001f81 	.word	0x08001f81
 8001f74:	08002027 	.word	0x08002027
 8001f78:	0800209d 	.word	0x0800209d
 8001f7c:	080020a5 	.word	0x080020a5
		case time:
			;
			//DRAW
			uint8_t min = get_Minute_led();
 8001f80:	f7ff fe04 	bl	8001b8c <get_Minute_led>
 8001f84:	4603      	mov	r3, r0
 8001f86:	71fb      	strb	r3, [r7, #7]
			uint8_t h = get_Hour_led();
 8001f88:	f7ff fe2c 	bl	8001be4 <get_Hour_led>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	71bb      	strb	r3, [r7, #6]
			uint8_t ofst = get_Minute_Offset_led();
 8001f90:	f7ff fe0e 	bl	8001bb0 <get_Minute_Offset_led>
 8001f94:	4603      	mov	r3, r0
 8001f96:	717b      	strb	r3, [r7, #5]

			for (int i = 0; i < 16; i++) {
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	e022      	b.n	8001fe4 <main+0xc0>
				if (i == min) {
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d104      	bne.n	8001fb0 <main+0x8c>
					blink[i] = 100;
 8001fa6:	4a5e      	ldr	r2, [pc, #376]	; (8002120 <main+0x1fc>)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	4413      	add	r3, r2
 8001fac:	2264      	movs	r2, #100	; 0x64
 8001fae:	701a      	strb	r2, [r3, #0]
				}
				if (blink[i] == 0) {
 8001fb0:	4a5b      	ldr	r2, [pc, #364]	; (8002120 <main+0x1fc>)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d110      	bne.n	8001fde <main+0xba>
					ptr_buffer[i] = (h == i) || (ofst == i) ? 5 : 0;
 8001fbc:	79bb      	ldrb	r3, [r7, #6]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d003      	beq.n	8001fcc <main+0xa8>
 8001fc4:	797b      	ldrb	r3, [r7, #5]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d101      	bne.n	8001fd0 <main+0xac>
 8001fcc:	2105      	movs	r1, #5
 8001fce:	e000      	b.n	8001fd2 <main+0xae>
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4b54      	ldr	r3, [pc, #336]	; (8002124 <main+0x200>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	4413      	add	r3, r2
 8001fda:	460a      	mov	r2, r1
 8001fdc:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 16; i++) {
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b0f      	cmp	r3, #15
 8001fe8:	ddd9      	ble.n	8001f9e <main+0x7a>

				}

			}
			if (button_state == 1) {
 8001fea:	4b4f      	ldr	r3, [pc, #316]	; (8002128 <main+0x204>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d10a      	bne.n	8002008 <main+0xe4>

				button_state = 0;
 8001ff2:	4b4d      	ldr	r3, [pc, #308]	; (8002128 <main+0x204>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
				clear_blink();
 8001ff8:	f7ff fdfe 	bl	8001bf8 <clear_blink>
				state = menue;
 8001ffc:	4b47      	ldr	r3, [pc, #284]	; (800211c <main+0x1f8>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]
				programm_nr = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
				clear_blink();
				state = timeset;
				programm_nr = 0;
			}

			break;
 8002006:	e06a      	b.n	80020de <main+0x1ba>
			} else if (button_state == 2) {
 8002008:	4b47      	ldr	r3, [pc, #284]	; (8002128 <main+0x204>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d166      	bne.n	80020de <main+0x1ba>
				button_state = 0;
 8002010:	4b45      	ldr	r3, [pc, #276]	; (8002128 <main+0x204>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
				clear_blink();
 8002016:	f7ff fdef 	bl	8001bf8 <clear_blink>
				state = timeset;
 800201a:	4b40      	ldr	r3, [pc, #256]	; (800211c <main+0x1f8>)
 800201c:	2203      	movs	r2, #3
 800201e:	601a      	str	r2, [r3, #0]
				programm_nr = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
			break;
 8002024:	e05b      	b.n	80020de <main+0x1ba>
		case menue:
			for (int i = 0; i < 16; i++) {
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e013      	b.n	8002054 <main+0x130>
				ptr_buffer[i] = (offsetLED_mapping[programm_nr] == i) ? 5 : 0;
 800202c:	4a3f      	ldr	r2, [pc, #252]	; (800212c <main+0x208>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4413      	add	r3, r2
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4293      	cmp	r3, r2
 800203a:	d101      	bne.n	8002040 <main+0x11c>
 800203c:	2105      	movs	r1, #5
 800203e:	e000      	b.n	8002042 <main+0x11e>
 8002040:	2100      	movs	r1, #0
 8002042:	4b38      	ldr	r3, [pc, #224]	; (8002124 <main+0x200>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4413      	add	r3, r2
 800204a:	460a      	mov	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 16; i++) {
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	3301      	adds	r3, #1
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	dde8      	ble.n	800202c <main+0x108>

			}
			if (button_state == 2) {
 800205a:	4b33      	ldr	r3, [pc, #204]	; (8002128 <main+0x204>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d109      	bne.n	8002076 <main+0x152>
				button_state = 0;
 8002062:	4b31      	ldr	r3, [pc, #196]	; (8002128 <main+0x204>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
				if (programm_nr < 4) {
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b03      	cmp	r3, #3
 800206c:	dc39      	bgt.n	80020e2 <main+0x1be>
					state = program;
 800206e:	4b2b      	ldr	r3, [pc, #172]	; (800211c <main+0x1f8>)
 8002070:	2202      	movs	r2, #2
 8002072:	601a      	str	r2, [r3, #0]
					programm_nr = 0;
					state = time;
				}

			}
			break;
 8002074:	e035      	b.n	80020e2 <main+0x1be>
			} else if (button_state == 1) {
 8002076:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <main+0x204>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d131      	bne.n	80020e2 <main+0x1be>
				button_state = 0;
 800207e:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <main+0x204>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
				programm_nr++;
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	3301      	adds	r3, #1
 8002088:	61bb      	str	r3, [r7, #24]
				if (programm_nr == 4) {
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	2b04      	cmp	r3, #4
 800208e:	d128      	bne.n	80020e2 <main+0x1be>
					programm_nr = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
					state = time;
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <main+0x1f8>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
			break;
 800209a:	e022      	b.n	80020e2 <main+0x1be>
		case program:
			state = time;
 800209c:	4b1f      	ldr	r3, [pc, #124]	; (800211c <main+0x1f8>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
			break;
 80020a2:	e021      	b.n	80020e8 <main+0x1c4>
		case timeset:
			for (int i = 0; i < 16; i++) {
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e007      	b.n	80020ba <main+0x196>

				blink[i] = 100;
 80020aa:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <main+0x1fc>)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	2264      	movs	r2, #100	; 0x64
 80020b2:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 16; i++) {
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3301      	adds	r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b0f      	cmp	r3, #15
 80020be:	ddf4      	ble.n	80020aa <main+0x186>

			}
			if (button_state == 2) {
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <main+0x204>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d10e      	bne.n	80020e6 <main+0x1c2>
				button_state = 0;
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <main+0x204>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
				clear_blink();
 80020ce:	f7ff fd93 	bl	8001bf8 <clear_blink>
				state = time;
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <main+0x1f8>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
			}
			break;
 80020d8:	e005      	b.n	80020e6 <main+0x1c2>
		default:
			break;
 80020da:	bf00      	nop
 80020dc:	e004      	b.n	80020e8 <main+0x1c4>
			break;
 80020de:	bf00      	nop
 80020e0:	e002      	b.n	80020e8 <main+0x1c4>
			break;
 80020e2:	bf00      	nop
 80020e4:	e000      	b.n	80020e8 <main+0x1c4>
			break;
 80020e6:	bf00      	nop
		}
		animation();
 80020e8:	f7ff fda6 	bl	8001c38 <animation>
		flip_Framebuffer();
 80020ec:	f7ff fef4 	bl	8001ed8 <flip_Framebuffer>
		//Gameloop moves
		now = HAL_GetTick();
 80020f0:	f7fe f884 	bl	80001fc <HAL_GetTick>
 80020f4:	6038      	str	r0, [r7, #0]
		if (now - starttime < 10) {
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b09      	cmp	r3, #9
 80020fe:	d806      	bhi.n	800210e <main+0x1ea>
			HAL_Delay(20 - (now - starttime));
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	3314      	adds	r3, #20
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f881 	bl	8000210 <HAL_Delay>
		}
		starttime = now;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	61fb      	str	r3, [r7, #28]
		switch (state) {
 8002112:	e725      	b.n	8001f60 <main+0x3c>
 8002114:	200000c8 	.word	0x200000c8
 8002118:	20000158 	.word	0x20000158
 800211c:	2000006c 	.word	0x2000006c
 8002120:	20000040 	.word	0x20000040
 8002124:	20000008 	.word	0x20000008
 8002128:	20000060 	.word	0x20000060
 800212c:	20000018 	.word	0x20000018

08002130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b090      	sub	sp, #64	; 0x40
 8002134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002136:	f107 0318 	add.w	r3, r7, #24
 800213a:	2228      	movs	r2, #40	; 0x28
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fb76 	bl	8002830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002152:	2302      	movs	r3, #2
 8002154:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002156:	2301      	movs	r3, #1
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800215a:	2310      	movs	r3, #16
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800215e:	2300      	movs	r3, #0
 8002160:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002162:	f107 0318 	add.w	r3, r7, #24
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fc4c 	bl	8000a04 <HAL_RCC_OscConfig>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002172:	f000 f98d 	bl	8002490 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002176:	230f      	movs	r3, #15
 8002178:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe feb8 	bl	8000f04 <HAL_RCC_ClockConfig>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800219a:	f000 f979 	bl	8002490 <Error_Handler>
  }
}
 800219e:	bf00      	nop
 80021a0:	3740      	adds	r7, #64	; 0x40
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <MX_I2C2_Init+0x50>)
 80021ae:	4a13      	ldr	r2, [pc, #76]	; (80021fc <MX_I2C2_Init+0x54>)
 80021b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_I2C2_Init+0x50>)
 80021b4:	4a12      	ldr	r2, [pc, #72]	; (8002200 <MX_I2C2_Init+0x58>)
 80021b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <MX_I2C2_Init+0x50>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MX_I2C2_Init+0x50>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <MX_I2C2_Init+0x50>)
 80021c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <MX_I2C2_Init+0x50>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <MX_I2C2_Init+0x50>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <MX_I2C2_Init+0x50>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <MX_I2C2_Init+0x50>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021e4:	4804      	ldr	r0, [pc, #16]	; (80021f8 <MX_I2C2_Init+0x50>)
 80021e6:	f7fe fae5 	bl	80007b4 <HAL_I2C_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80021f0:	f000 f94e 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000074 	.word	0x20000074
 80021fc:	40005800 	.word	0x40005800
 8002200:	000186a0 	.word	0x000186a0

08002204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002218:	463b      	mov	r3, r7
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <MX_TIM2_Init+0x98>)
 8002222:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002226:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002228:	4b1c      	ldr	r3, [pc, #112]	; (800229c <MX_TIM2_Init+0x98>)
 800222a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800222e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <MX_TIM2_Init+0x98>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <MX_TIM2_Init+0x98>)
 8002238:	f44f 7248 	mov.w	r2, #800	; 0x320
 800223c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <MX_TIM2_Init+0x98>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <MX_TIM2_Init+0x98>)
 8002246:	2200      	movs	r2, #0
 8002248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800224a:	4814      	ldr	r0, [pc, #80]	; (800229c <MX_TIM2_Init+0x98>)
 800224c:	f7fe fff6 	bl	800123c <HAL_TIM_Base_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002256:	f000 f91b 	bl	8002490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800225a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	4619      	mov	r1, r3
 8002266:	480d      	ldr	r0, [pc, #52]	; (800229c <MX_TIM2_Init+0x98>)
 8002268:	f7ff f93e 	bl	80014e8 <HAL_TIM_ConfigClockSource>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002272:	f000 f90d 	bl	8002490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800227e:	463b      	mov	r3, r7
 8002280:	4619      	mov	r1, r3
 8002282:	4806      	ldr	r0, [pc, #24]	; (800229c <MX_TIM2_Init+0x98>)
 8002284:	f7ff fb04 	bl	8001890 <HAL_TIMEx_MasterConfigSynchronization>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800228e:	f000 f8ff 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000158 	.word	0x20000158

080022a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */
	//100-1
	//10-1
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b4:	463b      	mov	r3, r7
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <MX_TIM3_Init+0x90>)
 80022be:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <MX_TIM3_Init+0x94>)
 80022c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <MX_TIM3_Init+0x90>)
 80022c4:	2209      	movs	r2, #9
 80022c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <MX_TIM3_Init+0x90>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <MX_TIM3_Init+0x90>)
 80022d0:	2263      	movs	r2, #99	; 0x63
 80022d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <MX_TIM3_Init+0x90>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <MX_TIM3_Init+0x90>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022e0:	4813      	ldr	r0, [pc, #76]	; (8002330 <MX_TIM3_Init+0x90>)
 80022e2:	f7fe ffab 	bl	800123c <HAL_TIM_Base_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80022ec:	f000 f8d0 	bl	8002490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022f6:	f107 0308 	add.w	r3, r7, #8
 80022fa:	4619      	mov	r1, r3
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <MX_TIM3_Init+0x90>)
 80022fe:	f7ff f8f3 	bl	80014e8 <HAL_TIM_ConfigClockSource>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002308:	f000 f8c2 	bl	8002490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230c:	2300      	movs	r3, #0
 800230e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002314:	463b      	mov	r3, r7
 8002316:	4619      	mov	r1, r3
 8002318:	4805      	ldr	r0, [pc, #20]	; (8002330 <MX_TIM3_Init+0x90>)
 800231a:	f7ff fab9 	bl	8001890 <HAL_TIMEx_MasterConfigSynchronization>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002324:	f000 f8b4 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002328:	bf00      	nop
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	200000c8 	.word	0x200000c8
 8002334:	40000400 	.word	0x40000400

08002338 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <MX_USART1_UART_Init+0x50>)
 8002340:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002348:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800235e:	220c      	movs	r2, #12
 8002360:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002370:	f7ff fae4 	bl	800193c <HAL_UART_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800237a:	f000 f889 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000108 	.word	0x20000108
 8002388:	40013800 	.word	0x40013800

0800238c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a0:	4b37      	ldr	r3, [pc, #220]	; (8002480 <MX_GPIO_Init+0xf4>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a36      	ldr	r2, [pc, #216]	; (8002480 <MX_GPIO_Init+0xf4>)
 80023a6:	f043 0310 	orr.w	r3, r3, #16
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b34      	ldr	r3, [pc, #208]	; (8002480 <MX_GPIO_Init+0xf4>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b8:	4b31      	ldr	r3, [pc, #196]	; (8002480 <MX_GPIO_Init+0xf4>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4a30      	ldr	r2, [pc, #192]	; (8002480 <MX_GPIO_Init+0xf4>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	6193      	str	r3, [r2, #24]
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <MX_GPIO_Init+0xf4>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <MX_GPIO_Init+0xf4>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a2a      	ldr	r2, [pc, #168]	; (8002480 <MX_GPIO_Init+0xf4>)
 80023d6:	f043 0308 	orr.w	r3, r3, #8
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b28      	ldr	r3, [pc, #160]	; (8002480 <MX_GPIO_Init+0xf4>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_A_Pin|A1_Pin|A2_Pin|A3_Pin, GPIO_PIN_RESET);
 80023e8:	2200      	movs	r2, #0
 80023ea:	213c      	movs	r1, #60	; 0x3c
 80023ec:	4825      	ldr	r0, [pc, #148]	; (8002484 <MX_GPIO_Init+0xf8>)
 80023ee:	f7fe f9b0 	bl	8000752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZ_Pin|K1_Pin|K0_Pin, GPIO_PIN_RESET);
 80023f2:	2200      	movs	r2, #0
 80023f4:	f44f 5183 	mov.w	r1, #4192	; 0x1060
 80023f8:	4823      	ldr	r0, [pc, #140]	; (8002488 <MX_GPIO_Init+0xfc>)
 80023fa:	f7fe f9aa 	bl	8000752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 80023fe:	2302      	movs	r3, #2
 8002400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <MX_GPIO_Init+0x100>)
 8002404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 800240a:	f107 0310 	add.w	r3, r7, #16
 800240e:	4619      	mov	r1, r3
 8002410:	481c      	ldr	r0, [pc, #112]	; (8002484 <MX_GPIO_Init+0xf8>)
 8002412:	f7fe f82d 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_A_Pin A1_Pin A2_Pin A3_Pin */
  GPIO_InitStruct.Pin = EN_A_Pin|A1_Pin|A2_Pin|A3_Pin;
 8002416:	233c      	movs	r3, #60	; 0x3c
 8002418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241a:	2301      	movs	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2302      	movs	r3, #2
 8002424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	4619      	mov	r1, r3
 800242c:	4815      	ldr	r0, [pc, #84]	; (8002484 <MX_GPIO_Init+0xf8>)
 800242e:	f7fe f81f 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_STAT_Pin */
  GPIO_InitStruct.Pin = BAT_STAT_Pin;
 8002432:	2340      	movs	r3, #64	; 0x40
 8002434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BAT_STAT_GPIO_Port, &GPIO_InitStruct);
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4619      	mov	r1, r3
 8002444:	480f      	ldr	r0, [pc, #60]	; (8002484 <MX_GPIO_Init+0xf8>)
 8002446:	f7fe f813 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZ_Pin K1_Pin K0_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin|K1_Pin|K0_Pin;
 800244a:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 800244e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002450:	2301      	movs	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2302      	movs	r3, #2
 800245a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	4619      	mov	r1, r3
 8002462:	4809      	ldr	r0, [pc, #36]	; (8002488 <MX_GPIO_Init+0xfc>)
 8002464:	f7fe f804 	bl	8000470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	2007      	movs	r0, #7
 800246e:	f7fd ffc8 	bl	8000402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002472:	2007      	movs	r0, #7
 8002474:	f7fd ffe1 	bl	800043a <HAL_NVIC_EnableIRQ>

}
 8002478:	bf00      	nop
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000
 8002484:	40010800 	.word	0x40010800
 8002488:	40010c00 	.word	0x40010c00
 800248c:	10310000 	.word	0x10310000

08002490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_SET);
 8002494:	2201      	movs	r2, #1
 8002496:	2110      	movs	r1, #16
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <Error_Handler+0x14>)
 800249a:	f7fe f95a 	bl	8000752 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40010800 	.word	0x40010800

080024a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_MspInit+0x5c>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	4a14      	ldr	r2, [pc, #80]	; (8002504 <HAL_MspInit+0x5c>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6193      	str	r3, [r2, #24]
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_MspInit+0x5c>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_MspInit+0x5c>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <HAL_MspInit+0x5c>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	61d3      	str	r3, [r2, #28]
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_MspInit+0x5c>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_MspInit+0x60>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <HAL_MspInit+0x60>)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40021000 	.word	0x40021000
 8002508:	40010000 	.word	0x40010000

0800250c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a16      	ldr	r2, [pc, #88]	; (8002580 <HAL_I2C_MspInit+0x74>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d124      	bne.n	8002576 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_I2C_MspInit+0x78>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a14      	ldr	r2, [pc, #80]	; (8002584 <HAL_I2C_MspInit+0x78>)
 8002532:	f043 0308 	orr.w	r3, r3, #8
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_I2C_MspInit+0x78>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002544:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002548:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800254a:	2312      	movs	r3, #18
 800254c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800254e:	2303      	movs	r3, #3
 8002550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002552:	f107 0310 	add.w	r3, r7, #16
 8002556:	4619      	mov	r1, r3
 8002558:	480b      	ldr	r0, [pc, #44]	; (8002588 <HAL_I2C_MspInit+0x7c>)
 800255a:	f7fd ff89 	bl	8000470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_I2C_MspInit+0x78>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4a08      	ldr	r2, [pc, #32]	; (8002584 <HAL_I2C_MspInit+0x78>)
 8002564:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002568:	61d3      	str	r3, [r2, #28]
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_I2C_MspInit+0x78>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002576:	bf00      	nop
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40005800 	.word	0x40005800
 8002584:	40021000 	.word	0x40021000
 8002588:	40010c00 	.word	0x40010c00

0800258c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259c:	d114      	bne.n	80025c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800259e:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_TIM_Base_MspInit+0x78>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4a18      	ldr	r2, [pc, #96]	; (8002604 <HAL_TIM_Base_MspInit+0x78>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	61d3      	str	r3, [r2, #28]
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <HAL_TIM_Base_MspInit+0x78>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2100      	movs	r1, #0
 80025ba:	201c      	movs	r0, #28
 80025bc:	f7fd ff21 	bl	8000402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025c0:	201c      	movs	r0, #28
 80025c2:	f7fd ff3a 	bl	800043a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025c6:	e018      	b.n	80025fa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <HAL_TIM_Base_MspInit+0x7c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d113      	bne.n	80025fa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <HAL_TIM_Base_MspInit+0x78>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <HAL_TIM_Base_MspInit+0x78>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	61d3      	str	r3, [r2, #28]
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_TIM_Base_MspInit+0x78>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	201d      	movs	r0, #29
 80025f0:	f7fd ff07 	bl	8000402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025f4:	201d      	movs	r0, #29
 80025f6:	f7fd ff20 	bl	800043a <HAL_NVIC_EnableIRQ>
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	40000400 	.word	0x40000400

0800260c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1c      	ldr	r2, [pc, #112]	; (8002698 <HAL_UART_MspInit+0x8c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d131      	bne.n	8002690 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_UART_MspInit+0x90>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4a1a      	ldr	r2, [pc, #104]	; (800269c <HAL_UART_MspInit+0x90>)
 8002632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002636:	6193      	str	r3, [r2, #24]
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_UART_MspInit+0x90>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_UART_MspInit+0x90>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	4a14      	ldr	r2, [pc, #80]	; (800269c <HAL_UART_MspInit+0x90>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	6193      	str	r3, [r2, #24]
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_UART_MspInit+0x90>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800265c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002660:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 0310 	add.w	r3, r7, #16
 800266e:	4619      	mov	r1, r3
 8002670:	480b      	ldr	r0, [pc, #44]	; (80026a0 <HAL_UART_MspInit+0x94>)
 8002672:	f7fd fefd 	bl	8000470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800267a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	4619      	mov	r1, r3
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <HAL_UART_MspInit+0x94>)
 800268c:	f7fd fef0 	bl	8000470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002690:	bf00      	nop
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40013800 	.word	0x40013800
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010800 	.word	0x40010800

080026a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b4:	e7fe      	b.n	80026b4 <HardFault_Handler+0x4>

080026b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ba:	e7fe      	b.n	80026ba <MemManage_Handler+0x4>

080026bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c0:	e7fe      	b.n	80026c0 <BusFault_Handler+0x4>

080026c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c6:	e7fe      	b.n	80026c6 <UsageFault_Handler+0x4>

080026c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f0:	f7fd fd72 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	tick();
 80026f4:	f7ff faf6 	bl	8001ce4 <tick>
  /* USER CODE END SysTick_IRQn 1 */
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}

080026fc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002700:	2002      	movs	r0, #2
 8002702:	f7fe f83f 	bl	8000784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <TIM2_IRQHandler+0x10>)
 8002712:	f7fe fde1 	bl	80012d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000158 	.word	0x20000158

08002720 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <TIM3_IRQHandler+0x10>)
 8002726:	f7fe fdd7 	bl	80012d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200000c8 	.word	0x200000c8

08002734 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002738:	4b15      	ldr	r3, [pc, #84]	; (8002790 <SystemInit+0x5c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a14      	ldr	r2, [pc, #80]	; (8002790 <SystemInit+0x5c>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <SystemInit+0x5c>)
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4911      	ldr	r1, [pc, #68]	; (8002790 <SystemInit+0x5c>)
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <SystemInit+0x60>)
 800274c:	4013      	ands	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <SystemInit+0x5c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0e      	ldr	r2, [pc, #56]	; (8002790 <SystemInit+0x5c>)
 8002756:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800275a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <SystemInit+0x5c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <SystemInit+0x5c>)
 8002766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800276a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <SystemInit+0x5c>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a07      	ldr	r2, [pc, #28]	; (8002790 <SystemInit+0x5c>)
 8002772:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002776:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <SystemInit+0x5c>)
 800277a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800277e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <SystemInit+0x64>)
 8002782:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002786:	609a      	str	r2, [r3, #8]
#endif 
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	40021000 	.word	0x40021000
 8002794:	f8ff0000 	.word	0xf8ff0000
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800279c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800279e:	e003      	b.n	80027a8 <LoopCopyDataInit>

080027a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80027a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80027a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80027a6:	3104      	adds	r1, #4

080027a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80027a8:	480a      	ldr	r0, [pc, #40]	; (80027d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80027ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80027ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80027b0:	d3f6      	bcc.n	80027a0 <CopyDataInit>
  ldr r2, =_sbss
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80027b4:	e002      	b.n	80027bc <LoopFillZerobss>

080027b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80027b8:	f842 3b04 	str.w	r3, [r2], #4

080027bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80027be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80027c0:	d3f9      	bcc.n	80027b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027c2:	f7ff ffb7 	bl	8002734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027c6:	f000 f80f 	bl	80027e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027ca:	f7ff fbab 	bl	8001f24 <main>
  bx lr
 80027ce:	4770      	bx	lr
  ldr r3, =_sidata
 80027d0:	0800288c 	.word	0x0800288c
  ldr r0, =_sdata
 80027d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80027d8:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 80027dc:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 80027e0:	200001ac 	.word	0x200001ac

080027e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027e4:	e7fe      	b.n	80027e4 <ADC1_2_IRQHandler>
	...

080027e8 <__libc_init_array>:
 80027e8:	b570      	push	{r4, r5, r6, lr}
 80027ea:	2500      	movs	r5, #0
 80027ec:	4e0c      	ldr	r6, [pc, #48]	; (8002820 <__libc_init_array+0x38>)
 80027ee:	4c0d      	ldr	r4, [pc, #52]	; (8002824 <__libc_init_array+0x3c>)
 80027f0:	1ba4      	subs	r4, r4, r6
 80027f2:	10a4      	asrs	r4, r4, #2
 80027f4:	42a5      	cmp	r5, r4
 80027f6:	d109      	bne.n	800280c <__libc_init_array+0x24>
 80027f8:	f000 f822 	bl	8002840 <_init>
 80027fc:	2500      	movs	r5, #0
 80027fe:	4e0a      	ldr	r6, [pc, #40]	; (8002828 <__libc_init_array+0x40>)
 8002800:	4c0a      	ldr	r4, [pc, #40]	; (800282c <__libc_init_array+0x44>)
 8002802:	1ba4      	subs	r4, r4, r6
 8002804:	10a4      	asrs	r4, r4, #2
 8002806:	42a5      	cmp	r5, r4
 8002808:	d105      	bne.n	8002816 <__libc_init_array+0x2e>
 800280a:	bd70      	pop	{r4, r5, r6, pc}
 800280c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002810:	4798      	blx	r3
 8002812:	3501      	adds	r5, #1
 8002814:	e7ee      	b.n	80027f4 <__libc_init_array+0xc>
 8002816:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800281a:	4798      	blx	r3
 800281c:	3501      	adds	r5, #1
 800281e:	e7f2      	b.n	8002806 <__libc_init_array+0x1e>
 8002820:	08002884 	.word	0x08002884
 8002824:	08002884 	.word	0x08002884
 8002828:	08002884 	.word	0x08002884
 800282c:	08002888 	.word	0x08002888

08002830 <memset>:
 8002830:	4603      	mov	r3, r0
 8002832:	4402      	add	r2, r0
 8002834:	4293      	cmp	r3, r2
 8002836:	d100      	bne.n	800283a <memset+0xa>
 8002838:	4770      	bx	lr
 800283a:	f803 1b01 	strb.w	r1, [r3], #1
 800283e:	e7f9      	b.n	8002834 <memset+0x4>

08002840 <_init>:
 8002840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002842:	bf00      	nop
 8002844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002846:	bc08      	pop	{r3}
 8002848:	469e      	mov	lr, r3
 800284a:	4770      	bx	lr

0800284c <_fini>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	bf00      	nop
 8002850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002852:	bc08      	pop	{r3}
 8002854:	469e      	mov	lr, r3
 8002856:	4770      	bx	lr
